// ---------------------------------------------------------------- //
// This file is autogenerated by pioasm version 2.2.0; do not edit! //
// ---------------------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// audio_spdif //
// ----------- //

#define audio_spdif_wrap_target 0
#define audio_spdif_wrap 3
#define audio_spdif_pio_version 1

#define audio_spdif_offset_output_low 0u

static const uint16_t audio_spdif_program_instructions[] = {
            //     .wrap_target
    0x6021, //  0: out    x, 1            side 0
    0x0020, //  1: jmp    !x, 0           side 0
    0x7021, //  2: out    x, 1            side 1
    0x1022, //  3: jmp    !x, 2           side 1
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program audio_spdif_program = {
    .instructions = audio_spdif_program_instructions,
    .length = 4,
    .origin = -1,
    .pio_version = audio_spdif_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config audio_spdif_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + audio_spdif_wrap_target, offset + audio_spdif_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

void spdif_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config sm_config = audio_spdif_program_get_default_config(offset);
    sm_config_set_out_shift(&sm_config, true, true, 32);
    sm_config_set_sideset(&sm_config, 1, false, false);
    sm_config_set_sideset_pins(&sm_config, pin);
    pio_sm_init(pio, sm, offset, &sm_config);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_set_pins(pio, sm, 0);
    pio_sm_exec(pio, sm, pio_encode_jmp(offset + audio_spdif_offset_output_low));
}

#endif

